#!/usr/bin/python

# Testrunner
#   Copyright 2018 Roderick Nayfield
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Goal is to be implemented in a single file - /usr/bin/testrunner - *not*
# a ton of site-packaged files, configuration files, and UI.

# Additional goal is to require minimal dependencies - this has been tested
# against system python from a 'minimal install' of rhel7
# Thus python3 and requests aren't available.  Le sigh.

import os
import tempfile
import uuid
import time
import subprocess
import urllib2
import argparse
import string
import random
import shutil
import sys

def dprint(v, *s):
    if v <= args.verbose:
        pfx = '#debug'+str(v)
        for i in xrange(v):
            pfx += '#'
        print pfx, s


def trgeturl(url, outf):
    """Retrieve URL and store to file.
       if file is 'lines' return nonblank/noncomment list of lines
    """
    dprint(4, 'trgeturl', url, outf)
    try:
        urlh = urllib2.urlopen(url)
        if outf == 'lines':
            result = []
            urlh = urllib2.urlopen(url)
            for line in urlh.readlines():
                ln = line.strip()
                if ln.startswith('#') or not ln:
                    continue
                result.append(ln)
        else:
            result = False
            with open(outf, 'wb') as f:
                f.write(urlh.read())
            result = True
    except urllib2.HTTPError, e:
        dprint(3, 'trgeturl HTTP error', e.code, url)
        result = False
    except urllib2.URLError, e:
        dprint(3, 'trgeturl URL error', e.reason, url)
        result = False

    return result


def getstrategy(stname, visited=None, retval=None):
    """Get a strategy.
    Takes a strategy name (<owner>/<strategy>), retrieves it
    from the trserver.
    Returns a list of tuples (pri, test, args)
    """
    dprint(2, 'getstrategy', stname)
    dprint(3, 'getstrategy', stname, visited, retval)
    if visited is None:
        visited = []
    if retval is None:
        retval = []
    if stname in visited:
        dprint(0, 'loop detected', stname, visited)
        # resilient but dangerous; keeps going
        return retval
    visited.append(stname)

    sto, sts = stname.split('/')
    surl = os.path.join(args.trserver, sto, 'strategy', sts)
    outp = trgeturl(surl, 'lines')
    if not outp:
        dprint(0, 'failed strategy', stname)
        # resilient but dangerous; keeps going
        return retval
    for ln in outp:
        cmdln = ln.split()
        cmd = cmdln.pop(0)
        if cmd == 'test':
            pri = 50
            if cmdln[0].startswith('pri='):
                pric = cmdln.pop(0)
                pri = int(pric.split('=')[1])
            test = cmdln.pop(0)
            retval.append((pri, test, cmdln))
            dprint(3,  'added test',  pri, test, cmdln)
        elif cmd == 'include' or cmd == 'strategy':
            dprint(3,  'including strategy', cmdln)
            retval = getstrategy(cmdln.pop(0), visited, retval)
        else:
            dprint(0,  'error unknown cmd', cmd)

    return retval


def tests_in(strategy):
    """Return a list of tests from a strategy list"""
    retval = []
    for pri, test, args in strategy:
        if test not in retval:
            retval.append(test)
    return retval


def get_test(rootdir, tname):
    """get a test payload into rootdir"""
    to, ts = tname.split('/')
    dprint(2, 'get test', tname)
    tbaseurl = os.path.join(args.trserver, to, 'tests', ts)
    tidxurl = os.path.join(tbaseurl, '.tr.idx')
    tlocaldr = os.path.join(rootdir, to, ts)
    outp = trgeturl(tidxurl, 'lines')
    if not outp:
        dprint(0,  'failed get test', tname)
        return False
    os.makedirs(tlocaldr,  0700)
    for ln in outp:
        itype, name, mode = ln.split('|')
        if itype == "DIR":
            dstd = os.path.join(tlocaldr, name)
            dprint(3, 'get_test mkdir', dstd, mode)
            intmode = int(mode, 8)
            os.mkdir(dstd, intmode)
        elif itype == "FILE":
            srcu = os.path.join(tbaseurl, name)
            dstf = os.path.join(tlocaldr, name)
            intmode = int(mode, 8)
            dprint(3, 'get_test retrieve', srcu, dstf, mode)
            if trgeturl(srcu, dstf):
                os.chmod(dstf, intmode)
            else:
                return False

    return True


def run_test(rd, test, targs):
    """Run a test at rd/test"""
    execdir = os.path.join(rd, test)
    backto = os.getcwd()
    os.chdir(execdir)
    execf = None
    for f in os.listdir(execdir):
        fn, fx = os.path.splitext(f)
        if fn.endswith('runme'):
            execf = f
            break
    if not execf:
        dprint(0, 'no exec', test)
        os.chdir(backto)
        return None, None, None
    pocmd = []
    pocmd.append(os.path.join('.', execf))
    pocmd.extend(targs)
    dprint(2, 'run_test_exec', execdir, pocmd)
    # TODO: stop using subprocess.PIPE / have run_test take a
    # pair of fds (pointing to a tempfile) and let the
    # caller deal.  
    #  why?  communicate with pipes has a fixed buffer.
    #  this will hang forever if it fills.
    #  While a test writing more than 64k is not a nice test,
    #  better to truncate output and print a nastygram than hang
    proc = subprocess.Popen(pocmd, stderr=subprocess.PIPE,
                            stdout=subprocess.PIPE)
    (out, err) = proc.communicate()
    ret = proc.returncode
    os.chdir(backto)
    return ret, out, err


def trupresult(rf):
    """Upload the resultfile to the resultserver"""
    bn = os.path.basename(rf)
    an = string.digits + string.ascii_letters
    boundary = ''.join(random.choice(an) for i in range(30))
    lines = []
    lines.append('--{}\r\n'.format(boundary))
    cd = 'Content-Disposition: form-data; name="file";'
    cd += ' filename="{}"\r\n'.format(bn)
    lines.append(cd)
    lines.append('Content-Type: application/octet-stream\r\n')
    lines.append('\r\n')
    with open(rf, 'r') as f:
        lines.append(f.read())
    lines.append('\r\n')
    lines.append('--{}\r\n'.format(boundary))
    lines.append('\r\n')
    body = ''.join(lines)
    headers = {
        'Content-Type': 'multipart/form-data; boundary={}'.format(boundary),
        'Content-Length': str(len(body))}
    request = urllib2.Request(args.resultserver, data=body, headers=headers)
    try:
        result = True
        urllib2.urlopen(request)
        # note - my demoserver doesn't error on file already here.
        # I hope a real server does!
    except urllib2.HTTPError, e:
        dprint(3, 'trupresult HTTP error', e.code, args.resultserver)
        result = False
    except urllib2.URLError, e:
        dprint(3, 'trupresult URL error', e.reason, args.resultserver)
        result = False

    return result


################

# TODO args/behavior
# . dry-run (don't run tests)
# . drier-run (don't even dl tests)
# . a oneshot "just run one test" mode
parser = argparse.ArgumentParser()
parser.add_argument("--verbose", "-v", action="count",
                    help="increase verbosity")
parser.add_argument("--trserver", "-t", default='http://localhost:8400',
                    help="specify trserver")
parser.add_argument("--resultserver", "-r", default='http://localhost:8401',
                    help="specify resultserver")
parser.add_argument("--strategy", "-s", default='team1/demo',
                    help="use strategy")
args = parser.parse_args()
resultserver = args.trserver

slist = getstrategy(args.strategy)

# Sort by pri but otherwise preserve order
slist.sort(key=lambda tup: tup[0])

tmpdir = tempfile.mkdtemp(prefix='testrunner-')
dprint(2, 'running in', tmpdir)

for test in tests_in(slist):
    if not get_test(tmpdir, test):
        print "ABORT! cannot get", test
        sys.exit(1)

# This is unique per RFC4122
resultid = uuid.uuid1().hex
print "Running testrunner job", resultid
outfn = os.path.join(tmpdir, 'testrunner-'+resultid+'.result')
FH = open(outfn, 'w')

for pri, test, targs in slist:
    now = int(time.mktime(time.gmtime()))
    msg = '#TR#{} {} {}\n'.format(now, 'START', (test, targs))
    dprint(2, msg)
    FH.write(msg)
    res, stdo, stde = run_test(tmpdir, test, targs)
    now = int(time.mktime(time.gmtime()))
    if stdo:
        FH.write('#TR#{} {} {}\n'.format(now, 'STDOUT', (test, targs)))
        FH.write(stdo)
        FH.write('#TR#EOF\n')
    if stde:
        FH.write('#TR#{} {} {}\n'.format(now, 'STDERR', (test, targs)))
        FH.write(stde)
        FH.write('#TR#EOF\n')
    msg = '#TR#{} {} {}\n'.format(now, 'RES:'+str(res), (test, targs))
    dprint(2, msg)
    FH.write(msg)
    #TODO print stdout stderr

FH.close()

if trupresult(outfn):
    # We have cleanly uploaded our results.
    # TODO arg to not clean up
    shutil.rmtree(tmpdir)
    sys.exit(0)
else:
    print "Failed to upload results, leaving in", tmpdir
    sys.exit(6)

#fin
